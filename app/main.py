import logging
from contextlib import asynccontextmanager
from pathlib import Path

from fastapi import FastAPI, APIRouter, Request
from fastapi.responses import RedirectResponse, HTMLResponse
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates

from .routers import geral, biblia

# Configura√ß√£o de templates
BASE_DIR = Path(__file__).resolve().parent
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

# Configura√ß√£o de logging
logging.basicConfig(
    level=logging.INFO, format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# Metadados para documenta√ß√£o da API
tags_metadata = [
    {
        "name": "geral",
        "description": "Endpoints de sistema: health checks, vers√£o e status geral",
    },
    {
        "name": "biblia",
        "description": "Endpoints principais: busca de vers√≠culos, livros e navega√ß√£o b√≠blica",
    },
]


@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gerencia o ciclo de vida da aplica√ß√£o FastAPI."""
    logger.info("üöÄ Iniciando B√≠blia Self-Hosted API")
    logger.info("üìñ Sistema de busca b√≠blica carregado")
    yield
    logger.info("üîÑ Encerrando B√≠blia Self-Hosted API")


# Configura√ß√£o da aplica√ß√£o FastAPI
app = FastAPI(
    title="B√≠blia Self-Hosted API",
    description="""
## üìñ B√≠blia Self-Hosted

API para busca e navega√ß√£o em textos b√≠blicos, com foco em uso dom√©stico e privacidade.

### ‚ú® Funcionalidades Principais

- **Busca de vers√≠culos**: Parse inteligente de refer√™ncias b√≠blicas
- **Navega√ß√£o estruturada**: Acesso por livros, cap√≠tulos e vers√≠culos
- **M√∫ltiplos formatos**: Suporte a diferentes padr√µes de refer√™ncia
- **Self-hosted**: Execu√ß√£o local, sem depend√™ncia de servi√ßos externos

### üéØ Roadmap

- **‚úÖ Fase 1**: Busca b√°sica com refer√™ncias (Conclu√≠da)
- **üîÑ Fase 2**: Sistema de anota√ß√µes com tags coloridas
- **üìã Fase 3**: Leitura sequencial de passagens
- **ü§ñ Fase 4**: Busca sem√¢ntica com IA/NLP

### üìä Formatos de Busca Suportados

- `Jo√£o 3:16` - Vers√≠culo √∫nico
- `Jo√£o 3:16-18` - Faixa de vers√≠culos
- `Jo√£o 3:16,17,20` - M√∫ltiplos vers√≠culos
- `Jo√£o 3:16; Mateus 5:1` - M√∫ltiplos livros
""",
    version="0.1.0",
    openapi_tags=tags_metadata,
    lifespan=lifespan,
    contact={
        "name": "B√≠blia Self-Hosted",
        "url": "https://github.com/user/biblia-self-hosted",
    },
    license_info={"name": "MIT License", "url": "https://opensource.org/licenses/MIT"},
)

# Configura√ß√£o de CORS para desenvolvimento
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Em produ√ß√£o, especificar dom√≠nios
    allow_credentials=True,
    allow_methods=["GET", "POST"],
    allow_headers=["*"],
)

# Router versionado para API
v1_router = APIRouter(prefix="/api/v1", tags=["v1"])
v1_router.include_router(geral.router)
v1_router.include_router(biblia.router)

app.include_router(v1_router)

# Montar arquivos est√°ticos se o diret√≥rio existir
static_dir = BASE_DIR / "static"
if static_dir.exists():
    app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")


@app.get("/", response_class=HTMLResponse, include_in_schema=False)
async def pagina_inicial(request: Request):
    """
    P√°gina inicial com interface de busca b√≠blica estilo terminal.

    Returns:
        HTMLResponse: Template HTML renderizado
    """
    return templates.TemplateResponse("index.html", {"request": request})


@app.get("/api", include_in_schema=False)
async def api_info():
    """
    Informa√ß√µes b√°sicas da API.

    Returns:
        dict: Metadados da API
    """
    return {
        "name": "B√≠blia Self-Hosted API",
        "version": "0.1.0",
        "docs": "/docs",
        "openapi": "/openapi.json",
    }
